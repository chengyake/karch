diff --git a/drivers/nfc/pn547/pn547.c b/drivers/nfc/pn547/pn547.c
index b559212f..e67e03a 100644
--- a/drivers/nfc/pn547/pn547.c
+++ b/drivers/nfc/pn547/pn547.c
@@ -39,36 +39,46 @@
 #include <linux/pinctrl/consumer.h>
 #include <linux/poll.h>
 
+#include <linux/kthread.h>
+#include <linux/in.h>
+#include <linux/inet.h>
+#include <linux/socket.h>
+#include <net/sock.h>
 
 #include "pn547.h"
 
 #define MAX_BUFFER_SIZE	512
-//#define PN547_DEBUG
+#define PN547_DEBUG
 
 struct pn547_dev *pn547_dev;
 
+static int pn547_socket_send(unsigned char* data ,int len);
 
 static void pn547_disable_irq(struct pn547_dev *pn547_dev) {
 	unsigned long flags;
 
 	spin_lock_irqsave(&pn547_dev->irq_enabled_lock, flags);
 	if (pn547_dev->irq_enabled) {
-		disable_irq_nosync(pn547_dev->client->irq);
+		//disable_irq_nosync(pn547_dev->client->irq);
 		pn547_dev->irq_enabled = false;
 	}
 	spin_unlock_irqrestore(&pn547_dev->irq_enabled_lock, flags);
 }
 
 static irqreturn_t pn547_dev_irq_handler(int irq, void *dev_id) {
-
+    
+    unsigned char wake[]={3, 2, 1, 0};
 	struct pn547_dev *pn547_dev = dev_id;
-    //printk("nfc pn547 in irq\n");
+    printk("nfc pn547 in irq --------------> \n");
 	if (!gpio_get_value(pn547_dev->irq_gpio)) {
 		return IRQ_HANDLED;
 	}
 
 	pn547_disable_irq(pn547_dev);
 
+    
+    pn547_socket_send(&wake[0], 3);
+
 	/* Wake up waiting readers */
 	wake_up(&pn547_dev->read_wq);
 
@@ -77,7 +87,6 @@ static irqreturn_t pn547_dev_irq_handler(int irq, void *dev_id) {
 
 static ssize_t pn547_dev_read(struct file *filp, char __user *buf,
 		size_t count, loff_t *offset) {
-
 	struct pn547_dev *pn547_dev = filp->private_data;
 	char tmp[MAX_BUFFER_SIZE];
 	int ret,i;
@@ -98,7 +107,7 @@ static ssize_t pn547_dev_read(struct file *filp, char __user *buf,
 		}
 
 		pn547_dev->irq_enabled = true;
-		enable_irq(pn547_dev->client->irq);
+		//enable_irq(pn547_dev->client->irq);
 		ret = wait_event_interruptible(pn547_dev->read_wq,
 				gpio_get_value(pn547_dev->irq_gpio));
 
@@ -129,7 +138,7 @@ static ssize_t pn547_dev_read(struct file *filp, char __user *buf,
 	}
 #ifdef PN547_DEBUG	
 	printk("IFD->PC:");
-	for(i = 0; i < ret; i++){
+	for(i = 0; i < ret; i++) {
 		printk(" %02X", tmp[i]);
 	}
 	printk("\n");
@@ -171,7 +180,7 @@ static ssize_t pn547_dev_write(struct file *filp, const char __user *buf,
 
 #ifdef PN547_DEBUG	
 	printk("PC->IFD:");
-	for(i = 0; i < count; i++){
+	for(i = 0; i < count; i++) {
 		printk(" %02X", tmp[i]);
 	}
 	printk("\n");
@@ -284,11 +293,101 @@ static DEVICE_ATTR(ldo, S_IWUSR | S_IRUGO,
 #endif
 
 
+static struct socket *server_sock = NULL;
+static struct socket *client_sock = NULL;
+static int pn547_socket_send(unsigned char* data ,int len) {
+	int length = 0;
+	struct kvec vec;
+	struct msghdr msg;
+
+	memset(&msg,0,sizeof(msg));
+	vec.iov_base=data;
+	vec.iov_len=len;
+
+    if(client_sock == NULL)
+    {
+        return -3;
+    }
+    
+	if(client_sock->state != SS_CONNECTED)
+	{
+	    printk("pn547 server: send not accept\n");
+	    return -1;
+	}
+
+	length=kernel_sendmsg(client_sock,&msg,&vec,1,len); /*send message */
+	if(length<0){
+	    printk("pn547 server: kernel_sendmsg error = %d\n",length);
+	    return -2;
+	}
+
+	return 0;
+}
+
+int pn547_socket_task(void*data) {
+
+    struct sockaddr_in s_addr;
+    unsigned short portnum=8892;
+    int ret=0;
+
+    memset(&s_addr,0,sizeof(s_addr));
+    s_addr.sin_family=AF_INET;
+    s_addr.sin_port=htons(portnum);
+    s_addr.sin_addr.s_addr=htonl(INADDR_ANY);
+
+    /*create a socket*/
+    ret=sock_create_kern(AF_INET, SOCK_STREAM, 0, &server_sock);
+    if(ret) {
+        printk("pn547 server:socket_create error = %d\n",ret);
+        return -1;
+    }
+    printk("pn547 server: socket_create ok!\n");
+
+    /*bind the socket*/
+	ret=kernel_bind(server_sock, (struct sockaddr *)&s_addr, sizeof(s_addr));
+	if (ret < 0) {
+        printk("pn547 server: bind error = %d\n",ret);
+        sock_release(server_sock);
+        return -1;
+    }
+    printk("pn547 server: bind ok!\n");
+
+    /*listen*/
+	ret=kernel_listen(server_sock, 5);
+    if(ret < 0) {
+        printk("pn547 server: listen error = %d\n",ret);
+        sock_release(server_sock);
+        return -1;
+    }
+    printk("pn547 server: listen ok!\n");
+
+	/*accept*/
+	//for(;;)
+	{
+        ret=kernel_accept(server_sock, &client_sock, 0);
+        if (ret<0) {
+            printk("pn547 server: accept error = %d\n",ret);
+            sock_release(server_sock);
+            return -1;
+        }
+        printk("pn547 server: accept ok!\n");
+
+    }
+
+}
+
+
+
+
+
+
+
 static int pn547_probe(struct i2c_client *client,
 		const struct i2c_device_id *id)
 {
 	
 	int ret;
+    struct task_struct *pn547_socket;
 
 	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
 		printk("%s : need I2C_FUNC_I2C\n", __func__);
@@ -348,7 +447,7 @@ static int pn547_probe(struct i2c_client *client,
 	printk("%s : requesting IRQ %d name = %s \n", __func__, client->irq, client->name);
 	pn547_dev->irq_enabled = true;
 	ret = request_irq(client->irq, pn547_dev_irq_handler,
-			    IRQF_TRIGGER_RISING, client->name, pn547_dev);
+			    IRQF_TRIGGER_RISING | IRQF_NO_SUSPEND, client->name, pn547_dev);
 	if (ret) {
 		printk("request_irq failed\n");
 		goto err_request_irq_failed;
@@ -364,6 +463,16 @@ static int pn547_probe(struct i2c_client *client,
     }
 #endif
 
+    pn547_socket = kthread_create(pn547_socket_task, NULL, "pn547_socket_task");
+    if(IS_ERR(pn547_socket)){
+        printk("server: unable to start kernel thread.\n");
+        ret = PTR_ERR(pn547_socket);
+        pn547_socket = NULL;
+        return ret;
+    }
+    wake_up_process(pn547_socket);
+
+    device_init_wakeup(&pn547_dev->client->dev, 1);
 	printk("nfc probe successful\n");
 	return 0;
 
@@ -400,6 +509,32 @@ static int pn547_remove(struct i2c_client *client)
 	return 0;
 }
 
+//power manager suspend/resume
+static int pn547_suspend(struct device *dev)
+{   
+	struct i2c_client *client = to_i2c_client(dev);
+    printk("pn547 --> suspend\n");
+
+	if (device_may_wakeup(dev))
+        enable_irq_wake(client->irq);
+    return 0;
+}
+static int pn547_resume(struct device *dev)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+    printk("pn547 <-- resume\n");
+
+	if (device_may_wakeup(dev))
+        disable_irq_wake(client->irq);
+	return 0;
+}
+const struct dev_pm_ops pn547_pm = {
+	.suspend = pn547_suspend,
+	.resume = pn547_resume,
+};
+
+
+
 static const struct i2c_device_id pn547_id[] = {
 	{ PN547_NAME, 0 },
 	{ }
@@ -412,6 +547,7 @@ static struct i2c_driver pn547_driver = {
 	.driver		= {
 		.owner	= THIS_MODULE,
 		.name	= PN547_NAME,
+		.pm = &pn547_pm,
 	},
 };
 
@@ -435,3 +571,5 @@ module_exit(pn547_dev_exit);
 
 MODULE_DESCRIPTION("NFC PN547 driver");
 MODULE_LICENSE("GPL");
+
+
diff --git a/drivers/nfc/pn547/pn547.h b/drivers/nfc/pn547/pn547.h
index a69df44..1b1199d 100644
--- a/drivers/nfc/pn547/pn547.h
+++ b/drivers/nfc/pn547/pn547.h
@@ -46,6 +46,7 @@ struct pn547_dev	{
 	int                 pirq;
 	bool			irq_enabled;
 	spinlock_t		irq_enabled_lock;
+    int             irq_wakeup_state;
 
 };
 
